#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 29, 2017 04:35:30 PM

if __name__ == '__main__':
    import RunGame
    RunGame.runGame()

import sys


from tkinter import *
import tkinter.ttk as ttk
from tkinter import messagebox as mb

try:
    import genedgui_support
    import GUIManager as guim
    import GameManager as GM
except ImportError:
    import GameFiles.genedgui_support as genedgui_support
    import GameFiles.GUIManager as guim
    import GameFiles.GameManager as GM
    
import sys
import os
import time

window = None

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global top
    root = Tk()
    top = Click_Clicker (root)
    #window = top
    #print('top is: ' + str(top) + '. window is: ' + str(window))
    genedgui_support.init(root, top)
    root.mainloop()

w = None
def create_Click_Clicker(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Click_Clicker (w)
    genedgui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Click_Clicker():
    global w
    w.destroy()
    w = None

class Click_Clicker:
    global window
    class mainWindowLabels:
        try:
            import GameManager as GM
        except ImportError:
            import GameFiles.GameManager as GM
        CurrencyPanelText= "Currency" #StringVar(value="Currency", master=Tk())
        ClicksAmntLabelText = 'Clicks: ' + str(GM.numbers.clicks) #StringVar(value="#ofClicksHere", master=Tk())
        TitleText = 'Click Clicker'#StringVar(value="Click Clicker", master=Tk())
        ClickBText = 'Click!'#StringVar(value="Click!", master=Tk())
        TMOAWbText = 'Throw Mouse Out A Window'#StringVar(value="Throw Mouse out a Window", master=Tk())
        SaveFilePanelText = 'Save File Stuffs'#StringVar(value="Safe File Stuffs", master=Tk())
        SaveSaveBText = 'Save Game'#StringVar(value="Save Game", master=Tk())
        SaveWipeBText = 'Wipe Save'#StringVar(value="Wipe Save", master=Tk())
        SaveImportBText = 'Import Save'#StringVar(value="Import Save (CS)", master=Tk())
        SaveExportBText = 'Export Save'#StringVar(value="Export Save (CS)", master=Tk())
        ClickersPanelText = 'Clickers'#StringVar(value="Clickers:", master=Tk())
    
    ## no longer needed. might readd to be able to force refresh something.
    # def refresh(self, items=['all']):
        # '''This function refreshes text values.'''
        # self = Click_Clicker.__init__
        # if 'all' in items:
            # items = ['CurrencyPanel', 'ClicksAmntLabel', 'Title', 'ClickB', 'TMOAWb', 'SaveFilePanel', 'SaveFileB', 'SaveWipeB', 'SaveImportB', 'SaveExportB', 'ClickersPanel']
        
        # allItems = ['CurrencyPanel', 'ClicksAmntLabel', 'Title', 'ClickB', 'TMOAWb', 'SaveFilePanel', 'SaveFileB', 'SaveWipeB', 'SaveImportB', 'SaveExportB', 'ClickersPanel']
        
        # label = Click_Clicker.mainWindowLabels
        # if allItems[0] in items:
            # self.CurrencyPanel.configure(text=label.CurrencyPanelText)
        # if allItems[1] in items:
            # self.ClicksAmntLabel.configure(text=label.ClicksAmntLabelText)
        # if allItems[2] in items:
            # self.TitleLabel.configure(text=label.TitleText)
            
        
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font15 = "-family {Segoe UI} -size 15 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 24 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font10 = "-family {Segoe UI} -size 34 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
            
        itemBgColor = '#FF6A00'
        itemFgColor = '#40D0E0'
        itemDisabledBgColor = '#CC6A28'
        itemDisabledFgColor = '#28BBCC'
        panelBgColor = '#FFBA2F'
        panelFgColor = '#000000'
        windowBgColor = '#0094FF'
        
        buttonHiBgColor = '#FF3E00'
        buttonHiFgColor = '#409FE0'
            
        top.geometry("600x573+653+26")
        top.title("Click Clicker")
        top.configure(background=windowBgColor)
        
        label = Click_Clicker.mainWindowLabels
            
        self.CurrencyPanel = LabelFrame(top)
        self.CurrencyPanel.place(relx=0.5, rely=0.02, relheight=0.11, relwidth=0.48)
        self.CurrencyPanel.configure(relief=RAISED)
        self.CurrencyPanel.configure(foreground=panelFgColor)
        self.CurrencyPanel.configure(text=label.CurrencyPanelText)
        self.CurrencyPanel.configure(background=panelBgColor)
        self.CurrencyPanel.configure(width=150)

        self.ClicksAmntLabel = Label(self.CurrencyPanel)
        self.ClicksAmntLabel.place(relx=0.07, rely=0.025, height=31, relwidth=.9)
        self.ClicksAmntLabel.configure(background=panelBgColor)
        self.ClicksAmntLabel.configure(disabledforeground=itemDisabledFgColor)
        self.ClicksAmntLabel.configure(foreground=itemBgColor)
        self.ClicksAmntLabel.configure(text='Loading Text...')
        self.ClicksAmntLabel.configure(width=124)

        self.title = Label(top)
        self.title.place(relx=0.02, rely=0.02, relheight=0.11, relwidth=.47)
        self.title.configure(background=itemBgColor)
        self.title.configure(disabledforeground=itemDisabledFgColor)
        self.title.configure(foreground=itemFgColor)
        self.title.configure(relief=SUNKEN)
        self.title.configure(text=label.TitleText)
        self.title.configure(width=421)
        #self.title.configure(visible=True)
        
        ## ------------------- Clickers Panel -------------------- ##

        self.ClickersPanel = LabelFrame(top)
        self.ClickersPanel.place(relx=0.25, rely=0.14, relheight=0.85, relwidth=0.73)
        self.ClickersPanel.configure(relief=GROOVE)
        self.ClickersPanel.configure(foreground=panelFgColor)
        self.ClickersPanel.configure(text=label.ClickersPanelText)
        self.ClickersPanel.configure(background=panelBgColor)
        self.ClickersPanel.configure(width=290)
        
        self.BuyCursorB = Button(self.ClickersPanel)
        self.BuyCursorB.place(relx=0.01, rely=0.01, relheight=0.1, relwidth=.4)
        self.BuyCursorB.configure(activebackground=itemBgColor, activeforeground=itemFgColor)
        self.BuyCursorB.configure(background=itemBgColor, disabledforeground=itemDisabledFgColor)
        self.BuyCursorB.configure(text='Loading Text...')
        self.BuyCursorB.configure(command=guim.button.BuyCursorB.Click)
        
        self.CursorCostLabel = Label(self.ClickersPanel)
        self.CursorCostLabel.place(relx=.425, rely=0.01, relheight=0.1, relwidth=0.57)
        self.CursorCostLabel.configure(relief=GROOVE)
        self.CursorCostLabel.configure(foreground=panelFgColor)
        self.CursorCostLabel.configure(text='Loading Text...')
        self.CursorCostLabel.configure(background=panelBgColor)
        self.CursorCostLabel.configure(disabledforeground=itemDisabledFgColor)
        
        self.BuyMouseB = Button(self.ClickersPanel)
        self.BuyMouseB.place(relx=0.01, rely=0.12, relheight=0.1, relwidth=.4)
        self.BuyMouseB.configure(activebackground=itemBgColor, activeforeground=itemFgColor)
        self.BuyMouseB.configure(background=itemBgColor, disabledforeground=itemDisabledFgColor)
        self.BuyMouseB.configure(text='Loading Text...')
        self.BuyMouseB.configure(command=guim.button.BuyMouseB.Click)
        
        self.MouseCostLabel = Label(self.ClickersPanel)
        self.MouseCostLabel.place(relx=.425, rely=0.12, relheight=0.1, relwidth=0.57)
        self.MouseCostLabel.configure(relief=GROOVE)
        self.MouseCostLabel.configure(foreground=panelFgColor)
        self.MouseCostLabel.configure(text='Loading Text...')
        self.MouseCostLabel.configure(background=panelBgColor)
        self.MouseCostLabel.configure(disabledforeground=itemDisabledFgColor)
        
        self.BuyAutoB = Button(self.ClickersPanel)
        self.BuyAutoB.place(relx=0.01, rely=0.23, relheight=0.1, relwidth=.4)
        self.BuyAutoB.configure(activebackground=itemBgColor, activeforeground=itemFgColor)
        self.BuyAutoB.configure(background=itemBgColor, disabledforeground=itemDisabledFgColor)
        self.BuyAutoB.configure(text='Loading Text...')
        self.BuyAutoB.configure(command=guim.button.BuyAutoB.Click)
        
        self.AutoCostLabel = Label(self.ClickersPanel)
        self.AutoCostLabel.place(relx=.425, rely=0.23, relheight=.1, relwidth=0.57)
        self.AutoCostLabel.configure(relief=GROOVE, foreground=panelFgColor)
        self.AutoCostLabel.configure(text='Loading Text...')
        self.AutoCostLabel.configure(background=panelBgColor, disabledforeground=itemDisabledFgColor)
        
        
        
        #################################################################

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.ClickB = Button(top)
        self.ClickB.place(relx=0.02, rely=0.16, height=134, relwidth=0.225)
        self.ClickB.configure(activebackground=itemBgColor)
        self.ClickB.configure(activeforeground=itemFgColor)
        self.ClickB.configure(background=itemBgColor)
        self.ClickB.configure(disabledforeground=itemDisabledFgColor)
        self.ClickB.configure(font=font9)
        self.ClickB.configure(foreground=itemFgColor)
        self.ClickB.configure(highlightbackground=buttonHiBgColor)
        self.ClickB.configure(highlightcolor=buttonHiFgColor)
        self.ClickB.configure(pady="0")
        self.ClickB.configure(text=label.ClickBText, command=guim.button.ClickB.Click)
        self.ClickB.configure(width=277)

        self.TMOAWb = Button(top)
        self.TMOAWb.place(relx=0.02, rely=0.4, height=134, relwidth=.225)
        self.TMOAWb.configure(activebackground=itemBgColor)
        self.TMOAWb.configure(activeforeground=itemFgColor)
        self.TMOAWb.configure(background=itemBgColor)
        self.TMOAWb.configure(disabledforeground=itemDisabledFgColor)
        self.TMOAWb.configure(font=font15)
        self.TMOAWb.configure(foreground=itemFgColor)
        self.TMOAWb.configure(highlightbackground=buttonHiBgColor)
        self.TMOAWb.configure(highlightcolor=buttonHiFgColor)
        self.TMOAWb.configure(overrelief="groove")
        self.TMOAWb.configure(pady="0")
        self.TMOAWb.configure(state=DISABLED)
        self.TMOAWb.configure(text=label.TMOAWbText)
        self.TMOAWb.configure(width=277)
        self.TMOAWb.configure(command=None)
        
        ## ------------------ Save File Panel ---------------------- ##
        
        self.SaveFilePanel = LabelFrame(top)
        self.SaveFilePanel.place(relx=0.02, rely=0.65, relheight=0.34, relwidth=.225)
        self.SaveFilePanel.configure(relief=SUNKEN)
        self.SaveFilePanel.configure(foreground=panelFgColor)
        self.SaveFilePanel.configure(text=label.SaveFilePanelText)
        self.SaveFilePanel.configure(background=panelBgColor)
        self.SaveFilePanel.configure(width=280)

        self.SaveSaveB = Button(self.SaveFilePanel)
        self.SaveSaveB.place(relx=0.04, rely=0.1, height=74, relwidth=0.48)
        self.SaveSaveB.configure(activebackground=itemFgColor)
        self.SaveSaveB.configure(activeforeground=itemBgColor)
        self.SaveSaveB.configure(background=itemFgColor)
        self.SaveSaveB.configure(disabledforeground=itemDisabledBgColor)
        self.SaveSaveB.configure(foreground=itemBgColor)
        self.SaveSaveB.configure(highlightbackground="#d9d9d9")
        self.SaveSaveB.configure(highlightcolor="black")
        self.SaveSaveB.configure(pady="0")
        self.SaveSaveB.configure(text=label.SaveSaveBText)
        self.SaveSaveB.configure(width=127)
        self.SaveSaveB.configure(command=guim.button.SaveSaveB.Click)

        self.SaveImportB = Button(self.SaveFilePanel)
        self.SaveImportB.place(relx=0.04, rely=0.56, height=74, relwidth=0.48)
        self.SaveImportB.configure(activebackground=itemFgColor)
        self.SaveImportB.configure(activeforeground=itemBgColor)
        self.SaveImportB.configure(background=itemFgColor)
        self.SaveImportB.configure(disabledforeground=itemDisabledBgColor)
        self.SaveImportB.configure(foreground=itemBgColor)
        self.SaveImportB.configure(highlightbackground="#d9d9d9")
        self.SaveImportB.configure(highlightcolor="black")
        self.SaveImportB.configure(pady="0")
        self.SaveImportB.configure(state=DISABLED)
        self.SaveImportB.configure(text=label.SaveImportBText)
        self.SaveImportB.configure(width=127)
        self.SaveImportB.configure(command=None)

        self.SaveWipeB = Button(self.SaveFilePanel)
        self.SaveWipeB.place(relx=0.54, rely=0.1, height=74, relwidth=0.48)
        self.SaveWipeB.configure(activebackground=itemFgColor)
        self.SaveWipeB.configure(activeforeground=itemBgColor)
        self.SaveWipeB.configure(background=itemFgColor)
        self.SaveWipeB.configure(disabledforeground=itemDisabledBgColor)
        self.SaveWipeB.configure(foreground=itemBgColor)
        self.SaveWipeB.configure(highlightbackground="#d9d9d9")
        self.SaveWipeB.configure(highlightcolor="black")
        self.SaveWipeB.configure(pady="0")
        self.SaveWipeB.configure(text=label.SaveWipeBText)
        self.SaveWipeB.configure(width=117)
        self.SaveWipeB.configure(command=guim.button.SaveWipeB.Click)

        self.SaveExportB = Button(self.SaveFilePanel)
        self.SaveExportB.place(relx=0.54, rely=0.56, height=74, relwidth=0.48)
        self.SaveExportB.configure(activebackground=itemFgColor)
        self.SaveExportB.configure(activeforeground=itemBgColor)
        self.SaveExportB.configure(background=itemFgColor)
        self.SaveExportB.configure(disabledforeground=itemDisabledBgColor)
        self.SaveExportB.configure(foreground=itemBgColor)
        self.SaveExportB.configure(highlightbackground="#d9d9d9")
        self.SaveExportB.configure(highlightcolor="black")
        self.SaveExportB.configure(pady="0")
        self.SaveExportB.configure(state=DISABLED)
        self.SaveExportB.configure(text=label.SaveExportBText)
        self.SaveExportB.configure(width=117)
        self.SaveExportB.configure(command=guim.button.SaveExportB.Click)
        
        self.infoPopup = Label(top)
        self.infoPopup.place(rely=1.0, relx=1.0, x=0, y=100, height=100, width=200, anchor=SE)
        self.infoPopup.config(text='blab')
        
        self.infoPopup.lift()
        
        #print('__init__: ' + str(self))
        
        global window
        window = self
        
        
    def popupInfo(mode='wait', seconds=10, text='Blab'):
        import time
        global top
        #print(str(window))
        self = top
        if mode == 'show':
            self.infoPopup.place(y=100)
            self.infoPopup.configure(text=text)
            i = 0
            for i in range(100):
                y = i - 100
                self.infoPopup.place(y=y)
                time.sleep(0.01)
                i = i + 1
        elif mode == 'hide':
            self.infoPopup.place(y=0)
            #while i
        
    def update():
        try:
            import GameManager as GM
        except ImportError:
            import GameFiles.GameManager as GM
        import time
        global window
        self = window
        #print(str(self) + ', ' + str(window))
        #print("updater: " + str(self))
        label = Click_Clicker.mainWindowLabels
        keepUpdate = True
        while keepUpdate == True:
            try:
                clicks = GM.numbers.clicks
                self.SaveExportB.configure(text='Export Save')
                self.ClicksAmntLabel.configure(text='Clicks: ' + str(int(GM.numbers.clicks)) + ' (' + str(GM.math.clicksPerSecond) + ' per second)\nCPS Multiplier: COMING SOON')
                self.BuyCursorB.configure(text='Buy Cursor (' + str(GM.math.requiredPerCursor) + ')')
                self.CursorCostLabel.configure(text=str(GM.numbers.cursors) + ' cursors clicking ' + str(GM.numbers.cursors * GM.math.clicksPerCursor) + ' times per second')
                self.BuyMouseB.configure(text='Buy Mouse (' + str(GM.math.requiredPerMouse) + ')')
                self.MouseCostLabel.configure(text=str(GM.numbers.mice) + ' mice clicking ' + str(GM.math.clicksPerMouse * GM.numbers.mice) + ' times per second')
                self.BuyAutoB.configure(text='Buy AutoClicker (' + str(GM.math.requiredPerAuto) + ')')
                self.AutoCostLabel.configure(text=str(GM.numbers.autoclickers) + ' autoclickers clicking ' + str(GM.math.clicksPerAuto * GM.numbers.autoclickers) + ' times per second')
                
                if GM.numbers.clicks < GM.math.requiredPerCursor:
                    self.BuyCursorB.configure(state=DISABLED)
                else:
                    self.BuyCursorB.configure(state=NORMAL)
                    
                if clicks < GM.math.requiredPerMouse:
                    self.BuyMouseB.configure(state=DISABLED)
                else:
                    self.BuyMouseB.configure(state=NORMAL)
                    
                    
                time.sleep(.25)
            except AttributeError:
                self = window
                label = Click_Clicker.mainWindowLabels
                time.sleep(.15)


def guiThread(closeOnExit):
    vp_start_gui()
    print("Window was closed!")
    GM.saveGame()
    pid = os.getpid()
    import subprocess as s
    s.Popen('taskkill /F /PID {0}'.format(pid), shell=True)
        

# def persistWarning(waitTime):
    # return
    # try:
        # int(waitTime)
    # except TypeError:
        # mb.showwarning('Warning','waitTime was not an int')
    # time.sleep(waitTime)
    
def startGui(closeOnExit=True, parentThread=''):
        
    #print("Starting GUI...")
    if closeOnExit == True:
        pass
        #print("Program will exit when the Tk window closes.")
    import threading
    #print('Creating thread names...')
    if parentThread is not '':
        tName = 'Game Window (Parent Thread: ' + parentThread + ') (GUI.GameWindowT)'
        tName2 = 'Game Window Updater (Parent Thread: ' + parentThread + ') (GUI.GUIUpdater)'
    else:
        tName = 'Game Window (GUI.GameWindowT)'
        tName2 = 'Game Window (GUI.GUIUpdater)'
    GameWindowT = threading.Thread(target=guiThread, name = tName, kwargs={'closeOnExit': True})
    GameWindowT.start()
    #print('Started main GUI')
    import time
    time.sleep(0.25)
    #print('Starting GUI Updater...')
    GUIUpdater = threading.Thread(target=Click_Clicker.update, name = tName2)
    GUIUpdater.start()
    #print('Started GUI Updater.')
    #print("Started GUI!")
    time.sleep(1)
    print('I WANT YOU to help banish the bugs!')
    print('If anything always says "Loading Text...", please tell the developer, as this is likely a bug!')
    print('>>>')
    




